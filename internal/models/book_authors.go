// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BookAuthor is an object representing the database table.
type BookAuthor struct {
	BookID   int64 `db:"book_id" boil:"book_id" json:"book_id" toml:"book_id" yaml:"book_id"`
	AuthorID int64 `db:"author_id" boil:"author_id" json:"author_id" toml:"author_id" yaml:"author_id"`

	R *bookAuthorR `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
	L bookAuthorL  `db:"-" boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BookAuthorColumns = struct {
	BookID   string
	AuthorID string
}{
	BookID:   "book_id",
	AuthorID: "author_id",
}

var BookAuthorTableColumns = struct {
	BookID   string
	AuthorID string
}{
	BookID:   "book_authors.book_id",
	AuthorID: "book_authors.author_id",
}

// Generated where

var BookAuthorWhere = struct {
	BookID   whereHelperint64
	AuthorID whereHelperint64
}{
	BookID:   whereHelperint64{field: "\"book_authors\".\"book_id\""},
	AuthorID: whereHelperint64{field: "\"book_authors\".\"author_id\""},
}

// BookAuthorRels is where relationship names are stored.
var BookAuthorRels = struct {
}{}

// bookAuthorR is where relationships are stored.
type bookAuthorR struct {
}

// NewStruct creates a new relationship struct
func (*bookAuthorR) NewStruct() *bookAuthorR {
	return &bookAuthorR{}
}

// bookAuthorL is where Load methods for each relationship are stored.
type bookAuthorL struct{}

var (
	bookAuthorAllColumns            = []string{"book_id", "author_id"}
	bookAuthorColumnsWithoutDefault = []string{"book_id", "author_id"}
	bookAuthorColumnsWithDefault    = []string{}
	bookAuthorPrimaryKeyColumns     = []string{"book_id", "author_id"}
)

type (
	// BookAuthorSlice is an alias for a slice of pointers to BookAuthor.
	// This should almost always be used instead of []BookAuthor.
	BookAuthorSlice []*BookAuthor
	// BookAuthorHook is the signature for custom BookAuthor hook methods
	BookAuthorHook func(context.Context, boil.ContextExecutor, *BookAuthor) error

	bookAuthorQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bookAuthorType                 = reflect.TypeOf(&BookAuthor{})
	bookAuthorMapping              = queries.MakeStructMapping(bookAuthorType)
	bookAuthorPrimaryKeyMapping, _ = queries.BindMapping(bookAuthorType, bookAuthorMapping, bookAuthorPrimaryKeyColumns)
	bookAuthorInsertCacheMut       sync.RWMutex
	bookAuthorInsertCache          = make(map[string]insertCache)
	bookAuthorUpdateCacheMut       sync.RWMutex
	bookAuthorUpdateCache          = make(map[string]updateCache)
	bookAuthorUpsertCacheMut       sync.RWMutex
	bookAuthorUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bookAuthorBeforeInsertHooks []BookAuthorHook
var bookAuthorBeforeUpdateHooks []BookAuthorHook
var bookAuthorBeforeDeleteHooks []BookAuthorHook
var bookAuthorBeforeUpsertHooks []BookAuthorHook

var bookAuthorAfterInsertHooks []BookAuthorHook
var bookAuthorAfterSelectHooks []BookAuthorHook
var bookAuthorAfterUpdateHooks []BookAuthorHook
var bookAuthorAfterDeleteHooks []BookAuthorHook
var bookAuthorAfterUpsertHooks []BookAuthorHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BookAuthor) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BookAuthor) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BookAuthor) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BookAuthor) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BookAuthor) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BookAuthor) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BookAuthor) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BookAuthor) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BookAuthor) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bookAuthorAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBookAuthorHook registers your hook function for all future operations.
func AddBookAuthorHook(hookPoint boil.HookPoint, bookAuthorHook BookAuthorHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		bookAuthorBeforeInsertHooks = append(bookAuthorBeforeInsertHooks, bookAuthorHook)
	case boil.BeforeUpdateHook:
		bookAuthorBeforeUpdateHooks = append(bookAuthorBeforeUpdateHooks, bookAuthorHook)
	case boil.BeforeDeleteHook:
		bookAuthorBeforeDeleteHooks = append(bookAuthorBeforeDeleteHooks, bookAuthorHook)
	case boil.BeforeUpsertHook:
		bookAuthorBeforeUpsertHooks = append(bookAuthorBeforeUpsertHooks, bookAuthorHook)
	case boil.AfterInsertHook:
		bookAuthorAfterInsertHooks = append(bookAuthorAfterInsertHooks, bookAuthorHook)
	case boil.AfterSelectHook:
		bookAuthorAfterSelectHooks = append(bookAuthorAfterSelectHooks, bookAuthorHook)
	case boil.AfterUpdateHook:
		bookAuthorAfterUpdateHooks = append(bookAuthorAfterUpdateHooks, bookAuthorHook)
	case boil.AfterDeleteHook:
		bookAuthorAfterDeleteHooks = append(bookAuthorAfterDeleteHooks, bookAuthorHook)
	case boil.AfterUpsertHook:
		bookAuthorAfterUpsertHooks = append(bookAuthorAfterUpsertHooks, bookAuthorHook)
	}
}

// One returns a single bookAuthor record from the query.
func (q bookAuthorQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BookAuthor, error) {
	o := &BookAuthor{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for book_authors")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BookAuthor records from the query.
func (q bookAuthorQuery) All(ctx context.Context, exec boil.ContextExecutor) (BookAuthorSlice, error) {
	var o []*BookAuthor

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BookAuthor slice")
	}

	if len(bookAuthorAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BookAuthor records in the query.
func (q bookAuthorQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count book_authors rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bookAuthorQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if book_authors exists")
	}

	return count > 0, nil
}

// BookAuthors retrieves all the records using an executor.
func BookAuthors(mods ...qm.QueryMod) bookAuthorQuery {
	mods = append(mods, qm.From("\"book_authors\""))
	return bookAuthorQuery{NewQuery(mods...)}
}

// FindBookAuthor retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBookAuthor(ctx context.Context, exec boil.ContextExecutor, bookID int64, authorID int64, selectCols ...string) (*BookAuthor, error) {
	bookAuthorObj := &BookAuthor{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"book_authors\" where \"book_id\"=$1 AND \"author_id\"=$2", sel,
	)

	q := queries.Raw(query, bookID, authorID)

	err := q.Bind(ctx, exec, bookAuthorObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from book_authors")
	}

	if err = bookAuthorObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bookAuthorObj, err
	}

	return bookAuthorObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BookAuthor) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_authors provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookAuthorColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bookAuthorInsertCacheMut.RLock()
	cache, cached := bookAuthorInsertCache[key]
	bookAuthorInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bookAuthorAllColumns,
			bookAuthorColumnsWithDefault,
			bookAuthorColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bookAuthorType, bookAuthorMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bookAuthorType, bookAuthorMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"book_authors\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"book_authors\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into book_authors")
	}

	if !cached {
		bookAuthorInsertCacheMut.Lock()
		bookAuthorInsertCache[key] = cache
		bookAuthorInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BookAuthor.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BookAuthor) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bookAuthorUpdateCacheMut.RLock()
	cache, cached := bookAuthorUpdateCache[key]
	bookAuthorUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bookAuthorAllColumns,
			bookAuthorPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update book_authors, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"book_authors\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bookAuthorPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bookAuthorType, bookAuthorMapping, append(wl, bookAuthorPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update book_authors row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for book_authors")
	}

	if !cached {
		bookAuthorUpdateCacheMut.Lock()
		bookAuthorUpdateCache[key] = cache
		bookAuthorUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bookAuthorQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for book_authors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for book_authors")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BookAuthorSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookAuthorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"book_authors\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bookAuthorPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bookAuthor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bookAuthor")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BookAuthor) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no book_authors provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bookAuthorColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bookAuthorUpsertCacheMut.RLock()
	cache, cached := bookAuthorUpsertCache[key]
	bookAuthorUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bookAuthorAllColumns,
			bookAuthorColumnsWithDefault,
			bookAuthorColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bookAuthorAllColumns,
			bookAuthorPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert book_authors, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bookAuthorPrimaryKeyColumns))
			copy(conflict, bookAuthorPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"book_authors\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bookAuthorType, bookAuthorMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bookAuthorType, bookAuthorMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert book_authors")
	}

	if !cached {
		bookAuthorUpsertCacheMut.Lock()
		bookAuthorUpsertCache[key] = cache
		bookAuthorUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BookAuthor record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BookAuthor) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BookAuthor provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bookAuthorPrimaryKeyMapping)
	sql := "DELETE FROM \"book_authors\" WHERE \"book_id\"=$1 AND \"author_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from book_authors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for book_authors")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bookAuthorQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bookAuthorQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from book_authors")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_authors")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BookAuthorSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bookAuthorBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookAuthorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"book_authors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookAuthorPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bookAuthor slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for book_authors")
	}

	if len(bookAuthorAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BookAuthor) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBookAuthor(ctx, exec, o.BookID, o.AuthorID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BookAuthorSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BookAuthorSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bookAuthorPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"book_authors\".* FROM \"book_authors\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bookAuthorPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BookAuthorSlice")
	}

	*o = slice

	return nil
}

// BookAuthorExists checks if the BookAuthor row exists.
func BookAuthorExists(ctx context.Context, exec boil.ContextExecutor, bookID int64, authorID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"book_authors\" where \"book_id\"=$1 AND \"author_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, bookID, authorID)
	}
	row := exec.QueryRowContext(ctx, sql, bookID, authorID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if book_authors exists")
	}

	return exists, nil
}
