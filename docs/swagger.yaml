basePath: /
definitions:
  book.Request:
    properties:
      description:
        type: string
      disable_paging:
        type: boolean
      image_url:
        type: string
      page:
        type: integer
      published_date:
        type: string
      search:
        type: boolean
      size:
        type: integer
      title:
        type: string
    required:
    - description
    - published_date
    - title
    type: object
  book.Res:
    properties:
      book_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      published_date:
        type: string
      title:
        type: string
    type: object
host: localhost:3080
info:
  contact:
    email: gmhafiz@gmail.com
    name: Hafiz Shafruddin
    url: https://github.com/gmhafiz/go8
  description: Go + Postgres + Chi Router + sqlx + Unit Testing starter kit for API development.
  license: {}
  title: Go8
  version: 0.8.0
paths:
  /api/v1/books:
    get:
      consumes:
      - application/json
      description: Get all books. By default it gets first page with 10 items.
      parameters:
      - description: page
        in: query
        name: page
        type: string
      - description: size
        in: query
        name: size
        type: string
      - description: term
        in: query
        name: title
        type: string
      - description: term
        in: query
        name: description
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/book.Res'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Show all books
    post:
      consumes:
      - application/json
      description: Get a book with JSON payload
      parameters:
      - description: Book Request
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/book.Request'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/book.Res'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a Book
  /api/v1/books/{bookID}:
    delete:
      consumes:
      - application/json
      description: Delete a book by its id.
      parameters:
      - description: book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Delete a Book
    get:
      consumes:
      - application/json
      description: Get a book by its id.
      parameters:
      - description: book ID
        in: path
        name: bookID
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/book.Res'
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get a Book
    put:
      consumes:
      - application/json
      description: Update a book by its model.
      parameters:
      - description: Book Request
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/book.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/book.Res'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Update a Book
  /health/liveness:
    get:
      description: Hits this API to see if API is running in the server
      responses:
        "200": {}
        "500": {}
      summary: Checks if API is up
  /health/readiness:
    get:
      description: Hits this API to see if both API and Database are running in the server
      responses:
        "200": {}
        "500": {}
      summary: Checks if both API and Database are up
swagger: "2.0"
